# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven

env:
  PROJECT_ID: ${{ secrets.GKE_PROJECT }}
  GAR_LOCATION: us-central1 # TODO: update region of the Artifact Registry
  GKE_CLUSTER: vozny-cluster   # TODO: update to cluster name
  GKE_ZONE: us-central1-c   # TODO: update to cluster zone
  DEPLOYMENT_NAME: vozny-deployment # TODO: update to deployment name
  REPOSITORY: vozny-repository # TODO: update to Artifact Registry docker repository
  IMAGE: user-service

on:
  push:
    branches: [ "main" ]
    paths:
      - 'user-service/src/**'
      - '.github/workflows/user-service-ci.yaml'
  pull_request:
    branches: [ "main" ]

name: User Service CI/CD

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'temurin'
        cache: maven
    - name: Build with Maven
      working-directory: ./user-service
      run: mvn clean package -DskipTests
    - uses: actions/upload-artifact@v3
      with:
        name: User-Service-Artifact
        path: user-service/target
  deploy:
      name: Setup, Build, Publish, and Deploy
      runs-on: ubuntu-latest
      environment: production

      permissions:
        contents: 'read'
        id-token: 'write'

      steps:
        - name: Checkout
          uses: actions/checkout@v3

        # Configure Workload Identity Federation and generate an access token.
        - id: 'auth'
          name: 'Authenticate to Google Cloud'
          uses: 'google-github-actions/auth@v0'
          with:
            token_format: 'access_token'
            workload_identity_provider: 'projects/123456789/locations/global/workloadIdentityPools/my-pool/providers/my-provider'
            service_account: 'my-service-account@my-project.iam.gserviceaccount.com'

        # Alternative option - authentication via credentials json
        # - id: 'auth'
        #   uses: 'google-github-actions/auth@v0'
        #   with:
        #     credentials_json: '${{ secrets.GCP_CREDENTIALS }}'

        - name: Docker configuration
          run: |-
            echo ${{steps.auth.outputs.access_token}} | docker login -u oauth2accesstoken --password-stdin https://$GAR_LOCATION-docker.pkg.dev
        # Get the GKE credentials so we can deploy to the cluster
        - name: Set up GKE credentials
          uses: google-github-actions/get-gke-credentials@v0
          with:
            cluster_name: ${{ env.GKE_CLUSTER }}
            location: ${{ env.GKE_ZONE }}

        # Build the Docker image
        - name: Build
          run: |-
            docker build \
              --tag "$GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$IMAGE:$GITHUB_SHA" \
              --build-arg GITHUB_SHA="$GITHUB_SHA" \
              --build-arg GITHUB_REF="$GITHUB_REF" \
              .
        # Push the Docker image to Google Artifact Registry
        - name: Publish
          run: |-
            docker push "$GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$IMAGE:$GITHUB_SHA"
        # Set up kustomize
        - name: Set up Kustomize
          run: |-
            curl -sfLo kustomize https://github.com/kubernetes-sigs/kustomize/releases/download/v3.1.0/kustomize_3.1.0_linux_amd64
            chmod u+x ./kustomize
        # Deploy the Docker image to the GKE cluster
        - name: Deploy
          run: |-
            # replacing the image name in the k8s template
            ./kustomize edit set image LOCATION-docker.pkg.dev/PROJECT_ID/REPOSITORY/IMAGE:TAG=$GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$IMAGE:$GITHUB_SHA
            ./kustomize build . | kubectl apply -f -
            kubectl rollout status deployment/$DEPLOYMENT_NAME
            kubectl get services -o wide