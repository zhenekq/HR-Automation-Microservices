# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven

env:
  PROJECT_ID: ${{ secrets.GKE_PROJECT }}
  GAR_LOCATION: us-central1 # TODO: update region of the Artifact Registry
  GKE_CLUSTER: vozny-cluster   # TODO: update to cluster name
  GKE_ZONE: us-central1   # TODO: update to cluster zone
  DEPLOYMENT_NAME: user-deployment # TODO: update to deployment name
  REPOSITORY: vozny-repository # TODO: update to Artifact Registry docker repository
  IMAGE: user-service

on:
  push:
    branches: [ "main" ]
    paths:
      - 'user-service/src/**'
      - '.github/workflows/user-service-ci.yaml'
  pull_request:
    branches: [ "main" ]

name: User Service CI/CD

jobs:
  build:
    name: Maven Build
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'
          cache: maven
      - name: Build with Maven
        working-directory: ./user-service
        run: mvn clean package -DskipTests
      - uses: actions/upload-artifact@v3
        with:
          name: user-service-0.0.1-SNAPSHOT
          path: ./user-service/target
  deploy:
    needs: build
    name: Kubernetes Deploy
    runs-on: ubuntu-latest
    environment: production
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      # Setup gcloud CLI
      - uses: google-github-actions/setup-gcloud@94337306dda8180d967a56932ceb4ddcf01edae7
        with:
          service_account_key: ${{ secrets.GKE_SA_KEY }}
          project_id: ${{ secrets.GKE_PROJECT }}

        # Configure Docker to use the gcloud command-line tool as a credential
        # helper for authentication
      - run: |-
          gcloud --quiet auth configure-docker

      # Get the GKE credentials so we can deploy to the cluster
      - uses: google-github-actions/get-gke-credentials@fb08709ba27618c31c09e014e1d8364b02e5042e
        with:
          cluster_name: ${{ env.GKE_CLUSTER }}
          location: ${{ env.GKE_ZONE }}
          credentials: ${{ secrets.GKE_SA_KEY }}
      - uses: actions/download-artifact@v3
        with:
          name: user-service-0.0.1-SNAPSHOT
          path: ./user-service/target
#      - name: Get local path
#        run: pwd
#
#      - name: Get current packages
#        run: ls -la
#
#      - name: Get folder of user-service
#        run: ls ./user-service -la
#
#      - name: Get target folder pf user-service
#        run: ls ./user-service/target -la

      # Build the Docker image
      - name: Build
        working-directory: ./user-service
        run: |-
          docker build \
            --tag "gcr.io/$PROJECT_ID/$IMAGE:$GITHUB_SHA" \
            --build-arg GITHUB_SHA="$GITHUB_SHA" \
            --build-arg GITHUB_REF="$GITHUB_REF" \
            .
      # Push the Docker image to Google Container Registry
      - name: Publish
        run: |-
          docker push "gcr.io/$PROJECT_ID/$IMAGE:$GITHUB_SHA"

        # Set up kustomize
      - name: Set up Kustomize
        working-directory: ./user-service
        run: |-
          curl -sfLo kustomize https://github.com/kubernetes-sigs/kustomize/releases/download/v3.1.0/kustomize_3.1.0_linux_amd64
          chmod u+x ./kustomize

      - name: Create deployment files
        working-directory: ./user-service
        run: |-
          kubectl get deployment vozny-cluster -o yaml >> deployment.yaml
          kubectl get service vozny-cluster -o yaml >> service.yaml

      - name: Get deployment files
        run: ls ./user-service -la

      - name: Get deployment.yaml
        run: cat ./user-service/deployment.yaml
      - name: Get service.yaml
        run: cat ./user-service/service.yaml

      # Deploy the Docker image to the GKE cluster
      - name: Deploy
        working-directory: ./user-service
        run: |-
          ./kustomize edit set image gcr.io/PROJECT_ID/IMAGE:TAG=gcr.io/$PROJECT_ID/$IMAGE:$GITHUB_SHA
          ./kustomize build . | kubectl apply -f -
          kubectl rollout status deployment/$DEPLOYMENT_NAME
          kubectl get services -o wide